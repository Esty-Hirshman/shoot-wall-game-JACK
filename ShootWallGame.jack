/*
    manage all game
*/
class ShootWallGame{
    field Man man;
    field Wall wall;
    field int score, timer, level, levelTimer;
    field boolean exit;
    static ShootWallGame instance;    
    static int lives,speed;
    static boolean run;
    
    /*
        constructor
    */
    constructor ShootWallGame new(){
        do Screen.clearScreen();
        do Screen.drawRectangle(0, 235, 511, 237);
        do Output.moveCursor(22,0);
        do Output.printString("Score: 0");
        do Output.moveCursor(22,20);
        do Output.printString("Level: 1");
        do Output.moveCursor(22,40);
        do Output.printString("Lives: ");
        do drawLives();
        let exit = false;
        let run = false;
        let man = Man.new(230, 202);
        let wall = Wall.new();
        let score = 0;
        let level  = 0;
        let levelTimer = 0;
        return this;
    }

    /*
        free memory
    */
    method void dispose(){
       do man.dispose();
       do wall.dispose();
       do Memory.deAlloc(this);
       return;
    }
        

   /*
        new instance of game
   */
    function void newInstance() {
        let instance = ShootWallGame.new();
        if(lives > 0){
            let run = true;
        }
        do instance.run();
        return;
    }

    /*
        get current instance game
    */
    function ShootWallGame getInstance(){
        return instance;
    }

    /*
        get num lives returned
    */
    function int getLives(){
        return lives;
    }
    

   /*
    on start game, shoe instructions and get speed from user
   */
    method void start(){
        var char key;
        while((speed < 1) | (speed > 5)){
            do Output.moveCursor(7,20);
            do Output.printString("    Welcome to my game! ");
            do Output.moveCursor(9,20);
            do Output.printString("     Move with arrows ");
            do Output.moveCursor(10,17);
            do Output.printString("move left with lelt Left arrow <- ");
            do Output.moveCursor(11,17);
            do Output.printString("move right with right arrow -> ");
            do Output.moveCursor(12,20);
            do Output.printString("     shoot with Space");
            do Output.moveCursor(14,20);
            do Output.printString("     Press ESC to exit");
            do Output.moveCursor(16,12);
            //get speed
            let speed = Keyboard.readInt("choose speed 1 - 5 and press Enter to start :");
            let key = Keyboard.keyPressed();
            if((key = 0) & (speed < 6) & (speed > 0)){
                let run = true;
                do Screen.clearScreen();
                do drawGame();
                do run();
                
            }
        }
        return;
    }

    /*
        draw the game
    */
    method void drawGame(){
        do Screen.drawRectangle(0, 235, 511, 237);
        do Output.moveCursor(22,0);
        do Output.printString("Score: 0");
        do Output.moveCursor(22,20);
        do Output.printString("Level: 1");
        do Output.moveCursor(22,40);
        do Output.printString("Lives: ");
        do drawLives();
        let man = Man.new(230, 202);
        let wall = Wall.new();
        return;
    }


    /*
        run the game antil exit
    */
    method void run(){
        var boolean finish;
        let wall = Wall.new();
        while(~exit & run){  
            let timer = timer + 1;     
            do getInput();
            if(levelTimer = 10){
                let level = level + 1;
                do Output.moveCursor(22,27);
                do Output.printInt(level+1);
                let levelTimer = 0;
            }           
            if(timer = ((20000/speed) -(200*level))){
                let levelTimer = levelTimer+1;
                let finish =  wall.run();
                if(~(finish)){
                    let lives = lives +1 ;
                    do lose();
                }
                let timer = 0;
            } 
    }
    if (exit) {
        do Screen.clearScreen();
        do Output.moveCursor(10,20);
        do Output.printString("Exit! Thank You!!");
        return;
    }
    return;
        
    }

    /*
        get the keyBoard value
    */
    method void getInput(){
        var int key;
        let key = Keyboard.keyPressed();
        if (key = 130) { do man.setDirection(1); }
        else {
            if (key = 132) { do man.setDirection(2); }
            else {
                    if (key = 140) { let exit = true; }
                else{
                    if(key = 32){
                            do man.shoot(speed);
                            let score = score + 1;
                            do Output.moveCursor(22,7);
                            do Output.printInt(score);
                        }
                }
            }
        }
        if ((~(key = 0)) & (~exit)) {
            let key = Keyboard.keyPressed();
            if((key = 130) | (key = 132)){
                do man.move(speed);
            }
            
        }
        return;
        
    }

    /*
        handle on gameOver
    */
    method void finish(){
        var char key;
        while (~(key = 128) & (~exit)){
            let key = Keyboard.keyPressed();    
        } 
        if(key = 128){
                let lives = 0;
                do ShootWallGame.newInstance();
            }
        
        return;
    }

    /*
        handle on lose in game, 
        check lives and start new game or show gameOver massage
    */
    method void lose(){
        do wall.drawWall();
        if((lives < 3) ){
            do Sys.wait(1000);
            do Output.moveCursor(9,20);
            do Output.printString ("                          ");
            do Output.moveCursor(10,20);
            do Output.printString("         lose!            ");
            do Output.moveCursor(11,20);
            do Output.printString("        Level: ");
            do Output.printInt(level);
            do Output.printString("          ");
            do Output.moveCursor(12,20);
            do Output.printString("        Lives: ");
            do Output.printInt(3-lives);
            do Output.printString("          ");
            do Output.moveCursor(13,20);
            do Output.printString ("                          ");
            do Sys.wait(2500);
            do ShootWallGame.newInstance();
        }if(lives = 3){
            do Output.moveCursor(9,20);
            do Output.printString ("                           ");
            do Output.moveCursor(10,20);
            do Output.printString("          You lose         ");
            do Output.moveCursor(11,20);
            do Output.printString("         Game Over         ");
            do Output.moveCursor(12,20);
            do Output.printString("  Press enter to play agen ");
            do Output.moveCursor(13,20);
            do Output.printString ("                           ");
            do finish();
            return ;
        }

        return ;
    }


    /*
        draw lives on screen
    */
    method void drawLives(){
        var int i;
        let i = 3-lives;
        while(i>0){
            do drawHeart((240*32) + ((370+(i*16))/16));
            let i = i-1;
        }
        return;
    }


    /*
        draw on heart for lives
    */
    method void drawHeart(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 7224);
        do Memory.poke(memAddress+128, 15996);
        do Memory.poke(memAddress+160, 32766);
        do Memory.poke(memAddress+192, -1);
        do Memory.poke(memAddress+224, -1);
        do Memory.poke(memAddress+256, -1);
        do Memory.poke(memAddress+288, 32766);
        do Memory.poke(memAddress+320, 16380);
        do Memory.poke(memAddress+352, 8184);
        do Memory.poke(memAddress+384, 4080);
        do Memory.poke(memAddress+416, 2016);
        do Memory.poke(memAddress+448, 960);
        do Memory.poke(memAddress+480, 384);
        return;
    }
}